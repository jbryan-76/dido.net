- support creating custom communication channels to allow the application to communicate with the remote code
- add progress messaging support to the execution context and feed back to both RunAsync (via handler) and jobs
- explore task "tethering": what should a task running on a runner do when the application connection terminates
  unexpectedly? also terminate? keep going and store result on a mediator? support re-establishing a connection?
  when an app tries reconnecting to an untethered task:
    case fail: the app will need to start the task over
    case succeed:
       case task failed: the app will receive the error and can retry as needed
       case task nominal: the app can communicate normally
  when starting an untethered task, return a "handle" object. use the handle to interact with the task: messages, stop/cancel.
  later, the application can stop/start again, then "connect" to an existing untethered task via: runner uri/id and task id
  and get back a handle.
- explore supporting fire-and-forget tasks, also with dynamic reconnection? this would enable eg microservice patterns.
  however what does it mean for following use case?
    1) application starts an untethered microservice task
    2) application stops (microservice task keeps running)
    3) application updates the microservice code
    4) application restarts and reconnects to the microservice task
    =>) if code has changed (? how to tell?), stop task, unload assemblies, restart task
- for "untethered" tasks, force the use of an external durable message system rather than including a custom solution?
  could also explore using an app-provided solution through configured delegates or plugins.
- for "untethered" tasks, allow opportunity to safely "update"?: save state, stop task, start task with new code, load state